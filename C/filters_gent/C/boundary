/*---------------------------------------------------------------------------*/
/* Program:  bound.c                                                         */
/*                                                                           */
/* Purpose:  This program reads a segmented image and identifies pixels      */
/*           on the boundaries of image regions.                             */
/*                                                                           */
/* Author:   John Gauch                                                      */
/*                                                                           */
/* Date:     March 23, 1994                                                  */
/*                                                                           */
/* Note:     Copyright (C) The University of Kansas, 1994                    */
/*---------------------------------------------------------------------------*/
#include <IM.h>

/*---------------------------------------------------------------------------*/
/* Purpose:  This is the main program.                                       */
/*---------------------------------------------------------------------------*/
main(int argc, char *argv[])
{
   /* Image variables */
   char Name1[50];
   char Name2[50];
   IM_TYPE *Image1;
   IM_TYPE *Image2;
   SHORT_TYPE **Data1;
   SHORT_TYPE **Data2;
   int PixType, Xdim, Ydim, Zdim, DimCnt;

   /* Program variables */
   int Debug = FALSE;
   int i = 0, x, y, z;

   /* Interpret program options */
   printf("BOUND Program - KUIM Version 1.0\n\n");
   while ((++i < argc) && (argv[i][0] == '-'))
      switch (argv[i][1])
      {
      case 'd':
         Debug = TRUE;
         break;
      default:
         Error("Invalid option encountered");
         break;
      }

   /* Check number of file names */
   if (argc - i != 2)
   {
      fprintf(stderr, "Usage: bound [options] infile outfile\n");
      fprintf(stderr, "       [-d]    Print debugging information\n");
      exit(1);
   }

   /* Get image file names from argument list */
   if (sscanf(argv[i++], "%s", Name1) == 0)
      Error("Could not get input file name");
   if (sscanf(argv[i++], "%s", Name2) == 0)
      Error("Could not get output file name");

   /* Read input image */
   Image1 = im_open(Name1, &PixType, &Xdim, &Ydim, &Zdim, &DimCnt);
   if (DimCnt < 2)
      Error("Can not process 1D images");
   Data1 = (SHORT_TYPE **) im_alloc2D(Image1, SHORT);
   im_read(Image1, SHORT, (char *) &(Data1[0][0]));

   /* Create output image */
   Image2 = im_create(Name2, SHORT, Xdim, Ydim, Zdim);
   Data2 = (SHORT_TYPE **) im_alloc2D(Image2, SHORT);

   /* Locate internal boundaries */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < (Ydim - 1); y++)
         for (x = 0; x < (Xdim - 1); x++)
            if ((Data1[z * Ydim + y][x] == Data1[z * Ydim + y][x + 1]) &&
                (Data1[z * Ydim + y][x] == Data1[z * Ydim + y + 1][x]))
               Data2[z * Ydim + y][x] = 0;
            else
               Data2[z * Ydim + y][x] = 1;

   /* Locate perimeter boundaries */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
      {
         if (Data1[z * Ydim + y][0] == 0)
            Data2[z * Ydim + y][0] = 0;
         else
            Data2[z * Ydim + y][0] = 1;
         if (Data1[z * Ydim + y][Xdim - 1] == 0)
            Data2[z * Ydim + y][Xdim - 1] = 0;
         else
            Data2[z * Ydim + y][Xdim - 1] = 1;
      }

   /* Locate perimeter boundaries */
   for (z = 0; z < Zdim; z++)
      for (x = 0; x < Xdim; x++)
      {
         if (Data1[z * Ydim + 0][x] == 0)
            Data2[z * Ydim + 0][x] = 0;
         else
            Data2[z * Ydim + 0][x] = 1;
         if (Data1[z * Ydim + Ydim - 1][x] == 0)
            Data2[z * Ydim + Ydim - 1][x] = 0;
         else
            Data2[z * Ydim + Ydim - 1][x] = 1;
      }

   /* Write information to output image */
   im_write(Image2, SHORT, (char *) &(Data2[0][0]));
   im_free2D((char **) Data1);
   im_free2D((char **) Data2);
   return (0);
}
