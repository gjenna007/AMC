/*---------------------------------------------------------------------------*/
/* Program:  diffusion.c                                                     */
/*                                                                           */
/* Purpose:  This program simultaneously smooths and segments an image       */
/*           using non-linear diffusion.  Shah's functional minimization     */
/*           algorithm is used to detect region boundaries and relax         */
/*           image smoothness constraints near these discontinuities.        */
/*           The functional minimized is:                                    */
/*                                                                           */
/*           E = W1*(f-d)*(f-d)                         (data matching)      */
/*             + W2*(fx*fx + fy*fy)*(1-s)*(1-s)         (1st deriv smooth)   */
/*             + W3*(fxx*fxx + 2*fxy*fxy + fyy*fyy)                          */
/*             *(1-s)*(1-s)                             (2nd deriv smooth)   */
/*             + W4*(s*s)                               (edge strengths)     */
/*             + W5*(sx*sx + sy*sy)                     (edge smoothness)    */
/*                                                                           */
/* Author:   John Gauch                                                      */
/*                                                                           */
/* Date:     April 26, 1994     - Original program.                          */
/*           September 11, 1994 - Version 2.                                 */
/*           September 22, 1994 - Version 3.                                 */
/*                                                                           */
/* Note:     Copyright (C) The University of Kansas, 1994                    */
/*---------------------------------------------------------------------------*/
#include <IM.h>
#define noSECOND

/* Global variables */
int Xdim, Ydim, Zdim;
int Debug = TRUE;
int OuterLoops = 20;
int InnerLoops = 1;
float W1 = 2.0;
float W2 = 1.0;
float W3 = 0.0;
float W4 = 100.0;
float W5 = 200.0;
float MaxVal;
float MinVal;

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine initializes the surface and edge strengths.        */
/*---------------------------------------------------------------------------*/
void Init2D(FLOAT_TYPE ** data1, FLOAT_TYPE ** data2, FLOAT_TYPE ** data3)
{
   int x, y;

   /* Initialize surface to original data */
   MaxVal = MinVal = data1[0][0];
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
      {
         data2[y][x] = data1[y][x];
         if (data2[y][x] > MaxVal)
            MaxVal = data2[y][x];
         if (data2[y][x] < MinVal)
            MinVal = data2[y][x];
      }

   /* Initialize edge strengths to 0 */
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         data3[y][x] = 0.0;
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine initializes the surface and edge strengths.        */
/*---------------------------------------------------------------------------*/
void Init3D(FLOAT_TYPE *** Data1, FLOAT_TYPE *** Data2, FLOAT_TYPE *** Data3)
{
   int x, y, z;

   /* Initialize surface to original data */
   MaxVal = MinVal = Data1[0][0][0];
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
         for (x = 0; x < Xdim; x++)
         {
            Data2[z][y][x] = Data1[z][y][x];
            if (Data2[z][y][x] > MaxVal)
               MaxVal = Data2[z][y][x];
            if (Data2[z][y][x] < MinVal)
               MinVal = Data2[z][y][x];
         }

   /* Initialize edge strengths to 0 */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
         for (x = 0; x < Xdim; x++)
            Data3[z][y][x] = 0.0;
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine calculates the current functional energy.          */
/*---------------------------------------------------------------------------*/
float Energy2D(FLOAT_TYPE ** data1, FLOAT_TYPE ** data2, FLOAT_TYPE ** data3)
{
   int x, y;
   float D, F, Fx, Fy, Fxx, Fxy, Fyy, S, Sx, Sy;
   double E1 = 0.0, E2 = 0.0, E3 = 0.0, E4 = 0.0, E5 = 0.0, TotalEnergy;

   /* Calculate surface energy */
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         if ((x > 0) && (y > 0) && (x < Xdim - 1) && (y < Ydim - 1))
         {
            /* Calculate data matching terms */
            D = data1[y][x];
            F = data2[y][x];
            S = data3[y][x];
            E1 += W1 * (D - F) * (D - F);
            E4 += W4 * S * S;

            /* Calculate first derivative terms */
            Fx = (data2[y][x + 1] - data2[y][x - 1]) / 2;
            Fy = (data2[y + 1][x] - data2[y - 1][x]) / 2;
            Sx = (data3[y][x + 1] - data3[y][x - 1]) / 2;
            Sy = (data3[y + 1][x] - data3[y - 1][x]) / 2;
            E2 += W2 * (1 - S) * (1 - S) * (Fx * Fx + Fy * Fy);
            E5 += W5 * (Sx * Sx + Sy * Sy);

#ifdef SECOND
            /* Calculate second derivative terms */
            Fxx = data2[y][x + 1] - 2 * data2[y][x] + data2[y][x - 1];
            Fyy = data2[y + 1][x] - 2 * data2[y][x] + data2[y - 1][x];
            Fxy = (data2[y + 1][x + 1] - data2[y + 1][x - 1]
                   - data2[y - 1][x + 1] + data2[y - 1][x - 1]) / 4;
            E3 += W3 * (1 - S) * (1 - S) * (Fxx * Fxx + 2 * Fxy * Fxy + Fyy * Fyy);
#endif
         }

   TotalEnergy = E1 + E2 + E3 + E4 + E5;
   return ((float) TotalEnergy);
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine calculates the current functional energy.          */
/*---------------------------------------------------------------------------*/
float Energy3D(FLOAT_TYPE *** Data1, FLOAT_TYPE *** Data2, FLOAT_TYPE *** Data3)
{
   int x, y, z;
   float D, F, Fx, Fy, Fz, Fxx, Fxy, Fxz, Fyy, Fyz, Fzz, S, Sx, Sy, Sz;
   double E1 = 0.0, E2 = 0.0, E3 = 0.0, E4 = 0.0, E5 = 0.0, TotalEnergy;

   /* Calculate functional energy */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
         for (x = 0; x < Xdim; x++)
            if ((x > 0) && (y > 0) && (z > 0) && (x < Xdim - 1) && (y < Ydim - 1) && (z < Zdim - 1))
            {
               /* Calculate data matching terms */
               D = Data1[z][y][x];
               F = Data2[z][y][x];
               S = Data3[z][y][x];
               E1 += W1 * (D - F) * (D - F);
               E4 += W4 * S * S;

               /* Calculate first derivative terms */
               Fx = (Data2[z][y][x + 1] - Data2[z][y][x - 1]) / 2;
               Fy = (Data2[z][y + 1][x] - Data2[z][y - 1][x]) / 2;
               Fz = (Data2[z + 1][y][x] - Data2[z - 1][y][x]) / 2;
               Sx = (Data3[z][y][x + 1] - Data3[z][y][x - 1]) / 2;
               Sy = (Data3[z][y + 1][x] - Data3[z][y - 1][x]) / 2;
               Sz = (Data3[z + 1][y][x] - Data3[z - 1][y][x]) / 2;
               E2 += W2 * (1 - S) * (1 - S) * (Fx * Fx + Fy * Fy + Fz * Fz);
               E5 += W5 * (Sx * Sx + Sy * Sy + Sz * Sz);

#ifdef SECOND
               /* Calculate second derivative terms */
               Fxx = Data2[z][y][x + 1] - 2 * Data2[z][y][x] + Data2[z][y][x - 1];
               Fyy = Data2[z][y + 1][x] - 2 * Data2[z][y][x] + Data2[z][y - 1][x];
               Fzz = Data2[z + 1][y][x] - 2 * Data2[z][y][x] + Data2[z - 1][y][x];
               Fxy = (Data2[z][y + 1][x + 1] - Data2[z][y + 1][x - 1]
                      - Data2[z][y - 1][x + 1] + Data2[z][y - 1][x - 1]) / 4;
               Fxz = (Data2[z + 1][y][x + 1] - Data2[z + 1][y][x - 1]
                      - Data2[z - 1][y][x + 1] + Data2[z - 1][y][x - 1]) / 4;
               Fyz = (Data2[z + 1][y + 1][x] - Data2[z + 1][y - 1][x]
                      - Data2[z - 1][y + 1][x] + Data2[z - 1][y - 1][x]) / 4;
               E3 += W3 * (1 - S) * (1 - S) * (Fxx * Fxx + Fyy * Fyy + Fzz * Fzz +
                             2 * Fxy * Fxy + 2 * Fxz * Fxz + 2 * Fyz * Fyz);
#endif
            }

   TotalEnergy = E1 + E2 + E3 + E4 + E5;
   TotalEnergy += Energy2D(Data1[0], Data2[0], Data3[0]);
   TotalEnergy += Energy2D(Data1[Zdim - 1], Data2[Zdim - 1], Data3[Zdim - 1]);
   return ((float) TotalEnergy);
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine performs one update to the edge estimate based     */
/*           on a finite differences solution to the following equation:     */
/*           0 = dE/df = dF/df - d(dF/dfx)/dx - d(dF/dfy)/dy                 */
/*             + dd(dF/dfxx)/dxx + dd(dF/dfxy)/dxy + dd(dF/dfyy)/dyy         */
/*---------------------------------------------------------------------------*/
void Surface2D(FLOAT_TYPE ** data1, FLOAT_TYPE ** data2, FLOAT_TYPE ** data3)
{
   int x, y;
   float S, Sx, Sy, Sxx, Sxy, Syy, nS, nS2;
   float wFx, wFy, wFxx, wFxy, wFyy, wFxxx, wFxxy, wFxyy, wFyyy, wFxxxx,
     wFxxyy, wFyyyy;
   float D, F, Fx, Fy, Fxx, Fxy, Fyy, Fxxx, Fxxy, Fxyy, Fyyy, Fxxxx, Fxxyy,
     Fyyyy;
   float Constant, Central, Neighbors;

   /* Update surface estimate */
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         if ((x > 1) && (y > 1) && (x < Xdim - 2) && (y < Ydim - 2))
         {
            /* Calculate edge partial derivative terms */
            S = data3[y][x];
            Sx = (data3[y][x + 1] - data3[y][x - 1]) / 2;
            Sy = (data3[y + 1][x] - data3[y - 1][x]) / 2;
#ifdef SECOND
            Sxx = data3[y][x + 1] - 2 * data3[y][x] + data3[y][x - 1];
            Syy = data3[y + 1][x] - 2 * data3[y][x] + data3[y - 1][x];
            Sxy = (data3[y + 1][x + 1] - data3[y + 1][x - 1]
                   - data3[y - 1][x + 1] + data3[y - 1][x - 1]) / 4;
#endif
            nS = 1 - S;
            nS2 = nS * nS;

            /* Calculate surface partial derivative terms (excluding central pixel) */
            F = D = data1[y][x];
            Fx = (data2[y][x + 1] - data2[y][x - 1]) / 2;
            Fy = (data2[y + 1][x] - data2[y - 1][x]) / 2;
            Fxx = data2[y][x + 1] + data2[y][x - 1];
            Fyy = data2[y + 1][x] + data2[y - 1][x];
#ifdef SECOND
            Fxy = (data2[y + 1][x + 1] - data2[y + 1][x - 1]
                   - data2[y - 1][x + 1] + data2[y - 1][x - 1]) / 4;
            Fxxx = (data2[y][x + 2] - 2 * data2[y][x + 1]
                    - data2[y][x - 2] + 2 * data2[y][x - 1]) / 2;
            Fyyy = (data2[y + 2][x] - 2 * data2[y + 1][x]
                    - data2[y - 2][x] + 2 * data2[y - 1][x]) / 2;
            Fxxy = (data2[y + 1][x + 1] - 2 * data2[y + 1][x] + data2[y + 1][x - 1]
                    - data2[y - 1][x + 1] + 2 * data2[y - 1][x] - data2[y - 1][x - 1]) / 2;
            Fxyy = (data2[y + 1][x + 1] - 2 * data2[y][x + 1] + data2[y - 1][x + 1]
                    - data2[y + 1][x - 1] + 2 * data2[y][x - 1] - data2[y - 1][x - 1]) / 2;
            Fxxxx = data2[y][x + 2] - 4 * data2[y][x + 1]
               + data2[y][x - 2] - 4 * data2[y][x - 1];
            Fyyyy = data2[y + 2][x] - 4 * data2[y + 1][x]
               + data2[y - 2][x] - 4 * data2[y - 1][x];
            Fxxyy = data2[y + 1][x + 1] - 2 * data2[y][x + 1] + data2[y - 1][x + 1]
               - 2 * data2[y + 1][x] - 2 * data2[y - 1][x]
               + data2[y + 1][x - 1] - 2 * data2[y][x - 1] + data2[y - 1][x - 1];
#endif

            /* Calculate surface partial derivative weights */
            wFx = 4 * W2 * nS * Sx;
            wFy = 4 * W2 * nS * Sy;
            wFxx = -2 * W2 * nS2;
            wFyy = -2 * W2 * nS2;
#ifdef SECOND
            wFxx = wFxx - 4 * W3 * (-Sx * Sx + nS * Sxx);
            wFyy = wFyy - 4 * W3 * (-Sy * Sy + nS * Syy);
            wFxy = -8 * W3 * (-Sx * Sy + nS * Sxy);
            wFxxx = -8 * W3 * nS * Sx;
            wFxxy = -8 * W3 * nS * Sy;
            wFxyy = wFxxx;
            wFyyy = wFxxy;
            wFxxxx = 2 * W3 * nS2;
            wFyyyy = wFxxxx;
            wFxxyy = 2 * wFxxxx;
#endif

            /* Calculate new surface value */
            Constant = -2 * W1 * D;
            Central = -2 * W1 + 2 * wFxx + 2 * wFyy;
            Neighbors = wFx * Fx + wFy * Fy + wFxx * Fxx + wFyy * Fyy;
#ifdef SECOND
            Central = Central - 6 * wFxxxx - 4 * wFxxyy - 6 * wFyyyy;
            Neighbors = Neighbors + wFxy * Fxy
               + wFxxx * Fxxx + wFxxy * Fxxy + wFxyy * Fxyy + wFyyy * Fyyy
               + wFxxxx * Fxxxx + wFxxyy * Fxxyy + wFyyyy * Fyyyy;
#endif
            if (Central != 0.0)
               F = (Constant + Neighbors) / Central;
            if (F < MinVal)
               F = MinVal;
            else if (F > MaxVal)
               F = MaxVal;
            data2[y][x] = F;
         }
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine performs one update to the edge estimate based     */
/*           on a finite differences solution to the following equation:     */
/*           0 = dE/df = dF/df - d(dF/dfx)/dx - d(dF/dfy)/dy                 */
/*             + dd(dF/dfxx)/dxx + dd(dF/dfxy)/dxy + dd(dF/dfyy)/dyy         */
/*---------------------------------------------------------------------------*/
void Surface3D(FLOAT_TYPE *** Data1, FLOAT_TYPE *** Data2, FLOAT_TYPE *** Data3)
{
   int x, y, z;
   float S, nS, nS2, Sx, Sy, Sz, Sxx, Sxy, Sxz, Syy, Syz, Szz;
   float D, F, Fx, Fy, Fz, Fxx, Fxy, Fxz, Fyy, Fyz, Fzz, Fxxx, Fyyy, Fzzz,
     Fxyy, Fxzz, Fyxx, Fyzz, Fzxx, Fzyy, Fxxxx, Fxxyy, Fxxzz, Fyyyy, Fyyzz,
     Fzzzz;
   float wFx, wFy, wFz, wFxx, wFxy, wFxz, wFyy, wFyz, wFzz, wFxxx, wFyyy,
     wFzzz, wFxyy, wFxzz, wFyxx, wFyzz, wFzxx, wFzyy, wFxxxx, wFxxyy, wFxxzz,
     wFyyyy, wFyyzz, wFzzzz;
   float Constant, Central, Neighbors;

   /* Update two slices at either end of image */
   Surface2D(Data1[0], Data2[0], Data3[0]);
   Surface2D(Data1[1], Data2[1], Data3[1]);
   Surface2D(Data1[Zdim - 2], Data2[Zdim - 2], Data3[Zdim - 2]);
   Surface2D(Data1[Zdim - 1], Data2[Zdim - 1], Data3[Zdim - 1]);

   /* Update surface estimate */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
         for (x = 0; x < Xdim; x++)
            if ((x > 1) && (y > 1) && (z > 1) && (x < Xdim - 2) && (y < Ydim - 2) && (z < Zdim - 2))
            {
               /* Calculate edge partial derivative terms */
               S = Data3[z][y][x];
               Sx = (Data3[z][y][x + 1] - Data3[z][y][x - 1]) / 2;
               Sy = (Data3[z][y + 1][x] - Data3[z][y - 1][x]) / 2;
               Sz = (Data3[z + 1][y][x] - Data3[z - 1][y][x]) / 2;
#ifdef SECOND
               Sxx = Data3[z][y][x + 1] - 2 * Data3[z][y][x] + Data3[z][y][x - 1];
               Syy = Data3[z][y + 1][x] - 2 * Data3[z][y][x] + Data3[z][y - 1][x];
               Szz = Data3[z + 1][y][x] - 2 * Data3[z][y][x] + Data3[z - 1][y][x];
               Sxy = (Data3[z][y + 1][x + 1] - Data3[z][y + 1][x - 1]
                      - Data3[z][y - 1][x + 1] + Data3[z][y - 1][x - 1]) / 4;
               Sxz = (Data3[z + 1][y][x + 1] - Data3[z + 1][y][x - 1]
                      - Data3[z - 1][y][x + 1] + Data3[z - 1][y][x - 1]) / 4;
               Syz = (Data3[z + 1][y + 1][x] - Data3[z + 1][y - 1][x]
                      - Data3[z - 1][y + 1][x] + Data3[z - 1][y - 1][x]) / 4;
#endif
               nS = 1 - S;
               nS2 = nS * nS;

               /* Calculate surface partial derivative terms (excluding central pixel) */
               F = D = Data1[z][y][x];
               Fx = (Data2[z][y][x + 1] - Data2[z][y][x - 1]) / 2;
               Fy = (Data2[z][y + 1][x] - Data2[z][y - 1][x]) / 2;
               Fz = (Data2[z + 1][y][x] - Data2[z - 1][y][x]) / 2;
               Fxx = Data2[z][y][x + 1] + Data2[z][y][x - 1];
               Fyy = Data2[z][y + 1][x] + Data2[z][y - 1][x];
               Fzz = Data2[z + 1][y][x] + Data2[z - 1][y][x];
#ifdef SECOND
               Fxy = (Data2[z][y + 1][x + 1] - Data2[z][y + 1][x - 1]
                      - Data2[z][y - 1][x + 1] + Data2[z][y - 1][x - 1]) / 4;
               Fxz = (Data2[z + 1][y][x + 1] - Data2[z + 1][y][x - 1]
                      - Data2[z - 1][y][x + 1] + Data2[z - 1][y][x - 1]) / 4;
               Fyz = (Data2[z + 1][y + 1][x] - Data2[z + 1][y - 1][x]
                      - Data2[z - 1][y + 1][x] + Data2[z - 1][y - 1][x]) / 4;
               Fxxx = (Data2[z][y][x + 2] - 2 * Data2[z][y][x + 1]
                       - Data2[z][y][x - 2] + 2 * Data2[z][y][x - 1]) / 2;
               Fyyy = (Data2[z][y + 2][x] - 2 * Data2[z][y + 1][x]
                       - Data2[z][y - 2][x] + 2 * Data2[z][y - 1][x]) / 2;
               Fzzz = (Data2[z + 2][y][x] - 2 * Data2[z + 1][y][x]
                       - Data2[z - 2][y][x] + 2 * Data2[z - 1][y][x]) / 2;
               Fxyy = (Data2[z][y + 1][x + 1] - 2 * Data2[z][y][x + 1] + Data2[z][y - 1][x + 1]
                       - Data2[z][y + 1][x - 1] + 2 * Data2[z][y][x - 1] - Data2[z][y - 1][x - 1]) / 2;
               Fxzz = (Data2[z + 1][y][x + 1] - 2 * Data2[z][y][x + 1] + Data2[z - 1][y][x + 1]
                       - Data2[z + 1][y][x - 1] + 2 * Data2[z][y][x - 1] - Data2[z - 1][y][x - 1]) / 2;
               Fyxx = (Data2[z][y + 1][x + 1] - 2 * Data2[z][y + 1][x] + Data2[z][y + 1][x - 1]
                       - Data2[z][y - 1][x + 1] + 2 * Data2[z][y - 1][x] - Data2[z][y - 1][x - 1]) / 2;
               Fyzz = (Data2[z + 1][y + 1][x] - 2 * Data2[z][y + 1][x] + Data2[z - 1][y + 1][x]
                       - Data2[z + 1][y - 1][x] + 2 * Data2[z][y - 1][x] - Data2[z - 1][y - 1][x]) / 2;
               Fzxx = (Data2[z + 1][y][x + 1] - 2 * Data2[z + 1][y][x] + Data2[z + 1][y][x - 1]
                       - Data2[z - 1][y][x + 1] + 2 * Data2[z - 1][y][x] - Data2[z - 1][y][x - 1]) / 2;
               Fzyy = (Data2[z + 1][y + 1][x] - 2 * Data2[z + 1][y][x] + Data2[z + 1][y - 1][x]
                       - Data2[z - 1][y + 1][x] + 2 * Data2[z - 1][y][x] - Data2[z - 1][y - 1][x]) / 2;
               Fxxxx = Data2[z][y][x + 2] - 4 * Data2[z][y][x + 1]
                  + Data2[z][y][x - 2] - 4 * Data2[z][y][x - 1];
               Fyyyy = Data2[z][y + 2][x] - 4 * Data2[z][y + 1][x]
                  + Data2[z][y - 2][x] - 4 * Data2[z][y - 1][x];
               Fzzzz = Data2[z + 2][y][x] - 4 * Data2[z + 1][y][x]
                  + Data2[z - 2][y][x] - 4 * Data2[z - 1][y][x];
               Fxxyy = Data2[z][y + 1][x + 1] - 2 * Data2[z][y][x + 1] + Data2[z][y - 1][x + 1]
                  - 2 * Data2[z][y + 1][x] - 2 * Data2[z][y - 1][x]
                  + Data2[z][y + 1][x - 1] - 2 * Data2[z][y][x - 1] + Data2[z][y - 1][x - 1];
               Fxxzz = Data2[z + 1][y][x + 1] - 2 * Data2[z][y][x + 1] + Data2[z - 1][y][x + 1]
                  - 2 * Data2[z + 1][y][x] - 2 * Data2[z - 1][y][x]
                  + Data2[z + 1][y][x - 1] - 2 * Data2[z][y][x - 1] + Data2[z - 1][y][x - 1];
               Fyyzz = Data2[z + 1][y + 1][x] - 2 * Data2[z][y + 1][x] + Data2[z - 1][y + 1][x]
                  - 2 * Data2[z + 1][y][x] - 2 * Data2[z - 1][y][x]
                  + Data2[z + 1][y - 1][x] - 2 * Data2[z][y - 1][x] + Data2[z - 1][y - 1][x];
#endif

               /* Calculate surface partial derivative weights */
               wFx = 4 * W2 * nS * Sx;
               wFy = 4 * W2 * nS * Sy;
               wFz = 4 * W2 * nS * Sz;
               wFxx = -2 * W2 * nS2;
               wFyy = -2 * W2 * nS2;
               wFzz = -2 * W2 * nS2;
#ifdef SECOND
               wFxx = wFxx - 4 * W3 * (-Sx * Sx + nS * Sxx);
               wFyy = wFyy - 4 * W3 * (-Sy * Sy + nS * Syy);
               wFzz = wFzz - 4 * W3 * (-Sz * Sz + nS * Szz);
               wFxy = -8 * W3 * (-Sx * Sy + nS * Sxy);
               wFxz = -8 * W3 * (-Sx * Sz + nS * Sxz);
               wFyz = -8 * W3 * (-Sy * Sz + nS * Syz);
               wFxxx = wFxyy = wFxzz = -8 * W3 * nS * Sx;
               wFyyy = wFyxx = wFyzz = -8 * W3 * nS * Sy;
               wFzzz = wFzxx = wFzyy = -8 * W3 * nS * Sz;
               wFxxxx = wFyyyy = wFzzzz = 2 * W3 * nS2;
               wFxxyy = wFxxzz = wFyyzz = 2 * wFxxxx;
#endif

               /* Calculate new surface value */
               Constant = -2 * W1 * D;
               Central = -2 * W1 + 2 * wFxx + 2 * wFyy + 2 * wFzz;
               Neighbors = wFx * Fx + wFy * Fy + wFz * Fz
                  + wFxx * Fxx + wFyy * Fyy + wFzz * Fzz;
#ifdef SECOND
               Central = Central
                  - 6 * wFxxxx - 6 * wFyyyy - 6 * wFzzzz
                  - 4 * wFxxyy - 4 * wFxxzz - 4 * wFyyzz;
               Neighbors = Neighbors
                  + wFxy * Fxy + wFxz * Fxz + wFyz * Fyz
                  + wFxxx * Fxxx + wFxyy * Fxyy + wFxzz * Fxzz
                  + wFyyy * Fyyy + wFyxx * Fyxx + wFyzz * Fyzz
                  + wFzzz * Fzzz + wFzxx * Fzxx + wFzyy * Fzyy
                  + wFxxxx * Fxxxx + wFyyyy * Fyyyy + wFzzzz * Fzzzz
                  + wFxxyy * Fxxyy + wFxxzz * Fxxzz + wFyyzz * Fyyzz;
#endif
               if (Central != 0.0)
                  F = (Constant + Neighbors) / Central;
               if (F < MinVal)
                  F = MinVal;
               else if (F > MaxVal)
                  F = MaxVal;
               Data2[z][y][x] = F;
            }
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine performs one update to the edge estimate based     */
/*           on a finite differences solution to the following equation:     */
/*           0 = dE/ds = dF/ds - d(dF/dsx)/dx - d(dF/dsy)/dy                 */
/*---------------------------------------------------------------------------*/
void Edge2D(FLOAT_TYPE ** data1, FLOAT_TYPE ** data2, FLOAT_TYPE ** data3)
{
   int x, y;
   float S, Fx, Fy, Fxx, Fxy, Fyy, Constant, Central, Neighbors;

   /* Update edge estimate */
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         if ((x > 1) && (y > 1) && (x < Xdim - 2) && (y < Ydim - 2))
         {
            /* Calculate first and second derivative terms */
            Fx = (data2[y][x + 1] - data2[y][x - 1]) / 2;
            Fy = (data2[y + 1][x] - data2[y - 1][x]) / 2;
            Constant = W2 * (Fx * Fx + Fy * Fy);

#ifdef SECOND
            Fxx = data2[y][x + 1] - 2 * data2[y][x] + data2[y][x - 1];
            Fyy = data2[y + 1][x] - 2 * data2[y][x] + data2[y - 1][x];
            Fxy = (data2[y + 1][x + 1] - data2[y + 1][x - 1]
                   - data2[y - 1][x + 1] + data2[y - 1][x - 1]) / 4;
            Constant = Constant + W3 * (Fxx * Fxx + 2 * Fxy * Fxy + Fyy * Fyy);
#endif

            /* Calculate weights for central pixel and neighbors */
            Central = W4 + W5 * 4;
            Neighbors = W5 * (data3[y - 1][x] + data3[y + 1][x]
                              + data3[y][x - 1] + data3[y][x + 1]);

            /* Calculate new S value */
            S = (Constant + Neighbors) / (Constant + Central);
            if (S < 0)
               data3[y][x] = data3[y][x] / 2;
            else if (S > 1)
               data3[y][x] = (data3[y][x] + 1) / 2;
            else
               data3[y][x] = S;
         }
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine performs one update to the edge estimate based     */
/*           on a finite differences solution to the following equation:     */
/*           0 = dE/ds = dF/ds - d(dF/dsx)/dx - d(dF/dsy)/dy                 */
/*---------------------------------------------------------------------------*/
void Edge3D(FLOAT_TYPE *** Data1, FLOAT_TYPE *** Data2, FLOAT_TYPE *** Data3)
{
   int x, y, z;
   float S, Fx, Fy, Fz, Fxx, Fxy, Fxz, Fyy, Fyz, Fzz;
   float Constant, Central, Neighbors;

   /* Update two slices at either end of image */
   Edge2D(Data1[0], Data2[0], Data3[0]);
   Edge2D(Data1[1], Data2[1], Data3[1]);
   Edge2D(Data1[Zdim - 2], Data2[Zdim - 2], Data3[Zdim - 2]);
   Edge2D(Data1[Zdim - 1], Data2[Zdim - 1], Data3[Zdim - 1]);

   /* Update edge estimate */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
         for (x = 0; x < Xdim; x++)
            if ((x > 1) && (y > 1) && (z > 1) && (x < Xdim - 2) && (y < Ydim - 2) && (z < Zdim - 2))
            {
               /* Calculate first and second derivative terms */
               Fx = (Data2[z][y][x + 1] - Data2[z][y][x - 1]) / 2;
               Fy = (Data2[z][y + 1][x] - Data2[z][y - 1][x]) / 2;
               Fz = (Data2[z + 1][y][x] - Data2[z - 1][y][x]) / 2;
               Constant = W2 * (Fx * Fx + Fy * Fy + Fz * Fz);

#ifdef SECOND
               Fxx = Data2[z][y][x + 1] - 2 * Data2[z][y][x] + Data2[z][y][x - 1];
               Fyy = Data2[z][y + 1][x] - 2 * Data2[z][y][x] + Data2[z][y - 1][x];
               Fzz = Data2[z + 1][y][x] - 2 * Data2[z][y][x] + Data2[z - 1][y][x];
               Fxy = (Data2[z][y + 1][x + 1] - Data2[z][y + 1][x - 1]
                      - Data2[z][y - 1][x + 1] + Data2[z][y - 1][x - 1]) / 4;
               Fxz = (Data2[z + 1][y][x + 1] - Data2[z + 1][y][x - 1]
                      - Data2[z - 1][y][x + 1] + Data2[z - 1][y][x - 1]) / 4;
               Fyz = (Data2[z + 1][y + 1][x] - Data2[z + 1][y - 1][x]
                      - Data2[z - 1][y + 1][x] + Data2[z - 1][y - 1][x]) / 4;
               Constant = Constant + W3 * (Fxx * Fxx + Fyy * Fyy + Fzz * Fzz +
                             2 * Fxy * Fxy + 2 * Fxz * Fxz + 2 * Fyz * Fyz);
#endif

               /* Calculate weights for central pixel and neighbors */
               Central = W4 + W5 * 6;
               Neighbors = W5 * (Data3[z - 1][y][x] + Data3[z + 1][y][x]
                                 + Data3[z][y - 1][x] + Data3[z][y + 1][x]
                                 + Data3[z][y][x - 1] + Data3[z][y][x + 1]);

               /* Calculate new S value */
               S = (Constant + Neighbors) / (Constant + Central);
               if (S < 0)
                  Data3[z][y][x] = Data3[z][y][x] / 2;
               else if (S > 1)
                  Data3[z][y][x] = (Data3[z][y][x] + 1) / 2;
               else
                  Data3[z][y][x] = S;
            }
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This is the main program.                                       */
/*---------------------------------------------------------------------------*/
int main(int argc, char *argv[])
{
   /* Image variables */
   char Name1[50];
   char Name2[50];
   char Name3[50];
   IM_TYPE *Image1;
   IM_TYPE *Image2;
   IM_TYPE *Image3;
   FLOAT_TYPE **data1;
   FLOAT_TYPE **data2;
   FLOAT_TYPE **data3;
   FLOAT_TYPE ***Data1;
   FLOAT_TYPE ***Data2;
   FLOAT_TYPE ***Data3;
   int PixType, DimCnt;

   /* Program variables */
   int i = 0, j, x, y, z;

   /* Interpret program options */
   printf("DIFFUSION Program - KUIM Version 3.0\n\n");
   while ((++i < argc) && (argv[i][0] == '-'))
      switch (argv[i][1])
      {
      case 'n':
         if (sscanf(argv[++i], "%d", &OuterLoops) == 0)
            Error("Could not get OuterLoops argument");
         break;
      case 'i':
         if (sscanf(argv[++i], "%d", &InnerLoops) == 0)
            Error("Could not get InnerLoops argument");
         break;
      case 'w':
         if (sscanf(argv[++i], "%f", &W1) == 0)
            Error("Could not get W1 argument");
         if (sscanf(argv[++i], "%f", &W2) == 0)
            Error("Could not get W2 argument");
         if (sscanf(argv[++i], "%f", &W3) == 0)
            Error("Could not get W3 argument");
         if (sscanf(argv[++i], "%f", &W4) == 0)
            Error("Could not get W4 argument");
         if (sscanf(argv[++i], "%f", &W5) == 0)
            Error("Could not get W5 argument");
         break;
      case 'd':
         Debug = TRUE;
         break;
      default:
         Error("Invalid option encountered");
         break;
      }

   /* Check number of file names */
   if (argc - i != 3)
   {
      fprintf(stderr, "Usage: diffusion [options] infile outfile edgefile\n");
      fprintf(stderr, "       [-d]    Print debugging information\n");
      fprintf(stderr, "       [-n #]  Number of diffusion iterations (%d)\n",
              OuterLoops);
      fprintf(stderr, "       [-i #]  Number of inner loop iterations (%d)\n",
              InnerLoops);
      fprintf(stderr, "       [-w # # # # #]  Functional weights");
      fprintf(stderr, " (%4.2f %4.2f %4.2f %4.2f %4.2f)\n", W1, W2, W3, W4, W5);
      exit(1);
   }

   /* Get image file names from argument list */
   if (sscanf(argv[i++], "%s", Name1) == 0)
      Error("Could not get input file name");
   if (sscanf(argv[i++], "%s", Name2) == 0)
      Error("Could not get output file name");
   if (sscanf(argv[i++], "%s", Name3) == 0)
      Error("Could not get output file name");

   /* Open input image */
   Image1 = im_open(Name1, &PixType, &Xdim, &Ydim, &Zdim, &DimCnt);
   if (DimCnt == 2)
   {
      /* Read input image */
      data1 = (FLOAT_TYPE **) im_alloc2D(Image1, FLOAT);
      im_read(Image1, FLOAT, (char *) &(data1[0][0]));

      /* Create output image */
      Image2 = im_create(Name2, FLOAT, Xdim, Ydim, Zdim);
      data2 = (FLOAT_TYPE **) im_alloc2D(Image2, FLOAT);
      Image3 = im_create(Name3, FLOAT, Xdim, Ydim, Zdim);
      data3 = (FLOAT_TYPE **) im_alloc2D(Image3, FLOAT);

      /* Iterate to improve surface and edge estimates */
      Init2D(data1, data2, data3);
      for (i = 0; i < OuterLoops; i++)
      {
         /* Iteratively update surface estimate */
         for (j = 0; j < InnerLoops; j++)
            Surface2D(data1, data2, data3);

         /* Iteratively update edge estimate */
         for (j = 0; j < InnerLoops; j++)
            Edge2D(data1, data2, data3);

         /* Calculate new functional energy */
         if (Debug == TRUE)
            printf("Iteration %d Energy %lf\n",
                   i + 1, Energy2D(data1, data2, data3));
      }

      /* Scale edge image to 0..100 */
      for (y = 0; y < Ydim; y++)
         for (x = 0; x < Xdim; x++)
            data3[y][x] *= 100;

      /* Write information to output image */
      im_write(Image2, FLOAT, (char *) &(data2[0][0]));
      im_write(Image3, FLOAT, (char *) &(data3[0][0]));
      im_free2D((char **) data1);
      im_free2D((char **) data2);
      im_free2D((char **) data3);
   }
   else if (DimCnt == 3)
   {
      /* Read input image */
      Data1 = (FLOAT_TYPE ***) im_alloc3D(Image1, FLOAT);
      im_read(Image1, FLOAT, (char *) &(Data1[0][0][0]));

      /* Create output image */
      Image2 = im_create(Name2, FLOAT, Xdim, Ydim, Zdim);
      Data2 = (FLOAT_TYPE ***) im_alloc3D(Image2, FLOAT);
      Image3 = im_create(Name3, FLOAT, Xdim, Ydim, Zdim);
      Data3 = (FLOAT_TYPE ***) im_alloc3D(Image3, FLOAT);

      /* Iterate to improve surface and edge estimates */
      Init3D(Data1, Data2, Data3);
      for (i = 0; i < OuterLoops; i++)
      {
         /* Iteratively update surface estimate */
         for (j = 0; j < InnerLoops; j++)
            Surface3D(Data1, Data2, Data3);

         /* Iteratively update edge estimate */
         for (j = 0; j < InnerLoops; j++)
            Edge3D(Data1, Data2, Data3);

         /* Calculate new functional energy */
         if (Debug == TRUE)
            printf("Iteration %d Energy %lf\n",
                   i + 1, Energy3D(Data1, Data2, Data3));
      }

      /* Scale edge image to 0..100 */
      for (z = 0; z < Zdim; z++)
         for (y = 0; y < Ydim; y++)
            for (x = 0; x < Xdim; x++)
               Data3[z][y][x] *= 100;

      /* Write information to output image */
      im_write(Image2, FLOAT, (char *) &(Data2[0][0][0]));
      im_write(Image3, FLOAT, (char *) &(Data3[0][0][0]));
      im_free3D((char ***) Data1);
      im_free3D((char ***) Data2);
      im_free3D((char ***) Data3);
   }

   return (0);
}
