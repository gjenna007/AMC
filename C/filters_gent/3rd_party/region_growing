/*---------------------------------------------------------------------------*/
/* Program:  region_grow.c                                                   */
/*                                                                           */
/* Purpose:  This program implements seed based region growing for           */
/*           image segmentation.  The starting point and growing             */
/*           threshold are specified as input parameters.                    */
/*                                                                           */
/* Author:   John Gauch                                                      */
/*                                                                           */
/* Date:     April 22, 1994 - Original program completed.                    */
/*           June 21, 1997  - Extended to vector valued images.              */
/*           July 29, 1997  - Extended to color images.                      */
/*                                                                           */
/* Note:     Copyright (C) The University of Kansas, 1994                    */
/*---------------------------------------------------------------------------*/
#include <IM.h>

/* Global variables */
FLOAT_TYPE **Data1s;
COLOR_TYPE **Data1c;
FLOAT_TYPE ***Data1v;
SHORT_TYPE **Data2;
int Xdim, Ydim, Zdim;
float Threshold = 50.0;
float Total, total[3];
int Count;

/* Function prototype */
void GrowScalar(int x, int y);
void GrowVector(int x, int y);
void GrowColor(int x, int y);

/*---------------------------------------------------------------------------*/
/* Purpose:  This is the main program.                                       */
/*---------------------------------------------------------------------------*/
int main(int argc, char *argv[])
{
   /* Image variables */
   char Name1[50];
   char Name2[50];
   IM_TYPE *Image1;
   IM_TYPE *Image2;
   int PixType, DimCnt;

   /* Program variables */
   int Debug = FALSE;
   int Xseed = 50, Yseed = 50;
   int i = 0, x, y;

   /* Interpret program options */
   printf("REGION_GROW Program - KUIM Version 2.1\n\n");
   while ((++i < argc) && (argv[i][0] == '-'))
      switch (argv[i][1])
      {
      case 't':
         if (sscanf(argv[++i], "%f", &Threshold) == 0)
            Error("Could not get threshold argument");
         break;
      case 's':
         if (sscanf(argv[++i], "%d", &Xseed) == 0)
            Error("Could not get x seed argument");
         if (sscanf(argv[++i], "%d", &Yseed) == 0)
            Error("Could not get y seed argument");
         break;
      case 'd':
         Debug = TRUE;
         break;
      default:
         Error("Invalid option encountered");
         break;
      }

   /* Check number of file names */
   if (argc - i != 2)
   {
      fprintf(stderr, "Usage: region_grow [options] infile outfile\n");
      fprintf(stderr, "       [-d]      Print debugging information\n");
      fprintf(stderr, "       [-t #]    Intensity difference threshold (50)\n");
      fprintf(stderr, "       [-s # #]  Seed point x,y, coordinates (50,50)\n");
      exit(1);
   }

   /* Get image file names from argument list */
   if (sscanf(argv[i++], "%s", Name1) == 0)
      Error("Could not get input file name");
   if (sscanf(argv[i++], "%s", Name2) == 0)
      Error("Could not get output file name");

   /* Read input image */
   Image1 = im_open(Name1, &PixType, &Xdim, &Ydim, &Zdim, &DimCnt);
   if (DimCnt == 1)
      Error("Can not process 1D images");

   /* Create output image */
   Image2 = im_create(Name2, SHORT, Xdim, Ydim, 1);
   Data2 = (SHORT_TYPE **) im_alloc2D(Image2, SHORT);

   /* Initialize output image */
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         Data2[y][x] = 0;

   /* Process color images */
   if ((PixType == COLOR) || (PixType == PSEUDO) || (PixType == JPEG_RGB))
   {
      /* Read input image */
      Data1c = (COLOR_TYPE **) im_alloc2D(Image1, COLOR);
      im_read(Image1, COLOR, (char *) &(Data1c[0][0]));

      /* Initialize region statistics */
      total[0] = total[1] = total[2] = Count = 0;
      for (y = Yseed - 5; y <= Yseed + 5; y++)
         for (x = Xseed - 5; x <= Xseed + 5; x++)
            if ((x > 0) && (y > 0) && (x < Xdim) && (y < Ydim))
            {
               Count++;
               total[0] += Data1c[y][x].r;
               total[1] += Data1c[y][x].g;
               total[2] += Data1c[y][x].b;
            }

      /* Perform recursive seed based region growing */
      GrowColor(Xseed, Yseed);
      printf("region contain %d points with mean value %f %f %f\n",
             Count, total[0] / Count, total[1] / Count, total[2] / Count);
   }

   /* Process scalar images */
   else if (DimCnt == 2)
   {
      /* Read input image */
      Data1s = (FLOAT_TYPE **) im_alloc2D(Image1, FLOAT);
      im_read(Image1, FLOAT, (char *) &(Data1s[0][0]));

      /* Initialize region statistics */
      Total = Count = 0;
      for (y = Yseed - 5; y <= Yseed + 5; y++)
         for (x = Xseed - 5; x <= Xseed + 5; x++)
            if ((x > 0) && (y > 0) && (x < Xdim) && (y < Ydim))
            {
               Count++;
               Total += Data1s[y][x];
            }

      /* Perform recursive seed based region growing */
      GrowScalar(Xseed, Yseed);
      printf("region contain %d points with mean value %f\n",
             Count, Total / Count);
   }

   /* Process vector valued images */
   else if (DimCnt == 3)
   {
      /* Read input image */
      Data1v = (FLOAT_TYPE ***) im_alloc3D(Image1, FLOAT);
      im_read(Image1, FLOAT, (char *) &(Data1v[0][0][0]));

      /* Initialize region statistics */
      total[0] = total[1] = total[2] = Count = 0;
      for (y = Yseed - 5; y <= Yseed + 5; y++)
         for (x = Xseed - 5; x <= Xseed + 5; x++)
            if ((x > 0) && (y > 0) && (x < Xdim) && (y < Ydim))
            {
               Count++;
               total[0] += Data1v[0][y][x];
               total[1] += Data1v[1][y][x];
               total[2] += Data1v[2][y][x];
            }

      /* Perform recursive seed based region growing */
      GrowVector(Xseed, Yseed);
      printf("region contain %d points with mean value %f %f %f\n",
             Count, total[0] / Count, total[1] / Count, total[2] / Count);
   }

   /* Write information to output image */
   im_write(Image2, SHORT, (char *) &(Data2[0][0]));
   im_free2D((char **) Data2);
   return (0);
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine does recursive region growing for scalar inputs.   */
/*---------------------------------------------------------------------------*/
void GrowScalar(int x, int y)
{
   float Diff, Mean;

   /* Check to see if point already part of region */
   if (Data2[y][x] == 0)
   {
      /* See if point is close enough to add */
      Mean = Total / Count;
      Diff = Data1s[y][x] - Mean;
      if (Diff < 0)
         Diff = -Diff;
      if (Diff < Threshold)
      {
         /* Add point to region and consider neighbors */
         Total += Data1s[y][x];
         Count++;
         Data2[y][x] = 1;
         if (x > 0)
            GrowScalar(x - 1, y);
         if (y > 0)
            GrowScalar(x, y - 1);
         if (x < Xdim - 1)
            GrowScalar(x + 1, y);
         if (y < Ydim - 1)
            GrowScalar(x, y + 1);
      }
   }
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine does recursive region growing for vector inputs.   */
/*---------------------------------------------------------------------------*/
void GrowVector(int x, int y)
{
   float Diff, mean[3], temp[3];

   /* Check to see if point already part of region */
   if (Data2[y][x] == 0)
   {
      /* See if point is close enough to add */
      mean[0] = total[0] / Count;
      mean[1] = total[1] / Count;
      mean[2] = total[2] / Count;
      temp[0] = Data1v[0][y][x] - mean[0];
      temp[1] = Data1v[1][y][x] - mean[1];
      temp[2] = Data1v[2][y][x] - mean[2];

      Diff = (float) sqrt((double)
               (temp[0] * temp[0] + temp[1] * temp[1] + temp[2] * temp[2]));

      if (Diff < Threshold)
      {
         /* Add point to region and consider neighbors */
         total[0] += Data1v[0][y][x];
         total[1] += Data1v[1][y][x];
         total[2] += Data1v[2][y][x];
         Count++;
         Data2[y][x] = 1;
         if (x > 0)
            GrowVector(x - 1, y);
         if (y > 0)
            GrowVector(x, y - 1);
         if (x < Xdim - 1)
            GrowVector(x + 1, y);
         if (y < Ydim - 1)
            GrowVector(x, y + 1);
      }
   }
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine does recursive region growing for color inputs.    */
/*---------------------------------------------------------------------------*/
void GrowColor(int x, int y)
{
   float Diff, mean[3], temp[3];

   /* Check to see if point already part of region */
   if (Data2[y][x] == 0)
   {
      /* See if point is close enough to add */
      mean[0] = total[0] / Count;
      mean[1] = total[1] / Count;
      mean[2] = total[2] / Count;
      temp[0] = Data1c[y][x].r - mean[0];
      temp[1] = Data1c[y][x].g - mean[1];
      temp[2] = Data1c[y][x].b - mean[2];

      Diff = (float) sqrt((double)
               (temp[0] * temp[0] + temp[1] * temp[1] + temp[2] * temp[2]));

      if (Diff < Threshold)
      {
         /* Add point to region and consider neighbors */
         total[0] += Data1c[y][x].r;
         total[1] += Data1c[y][x].g;
         total[2] += Data1c[y][x].b;
         Count++;
         Data2[y][x] = 1;
         if (x > 0)
            GrowColor(x - 1, y);
         if (y > 0)
            GrowColor(x, y - 1);
         if (x < Xdim - 1)
            GrowColor(x + 1, y);
         if (y < Ydim - 1)
            GrowColor(x, y + 1);
      }
   }
}
