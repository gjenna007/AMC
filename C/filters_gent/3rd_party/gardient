/*---------------------------------------------------------------------------*/
/* Program:  grad.c                                                          */
/*                                                                           */
/* Purpose:  This program calculates the gradient magnitude using            */
/*           finite difference based derivatives.                            */
/*                                                                           */
/* Author:   John Gauch, Edu Metz                                            */
/*                                                                           */
/* Date:     March 30, 1994 - Original program.                              */
/*           August 9, 1994 - Extended to color and 3D.                      */
/*           June 21, 1997  - Corrected bugs in color.                       */
/*           July 29, 1997  - Simplified color, vector, scalar code.         */
/*                                                                           */
/* Note:     Copyright (C) The University of Kansas, 1994                    */
/*---------------------------------------------------------------------------*/
#include <IM.h>
#define DEFAULT 1
#define ROBERTS 2
#define SOBEL   3
#define CUBIC   4
#define W1 0.125
#define W2 0.25
#define W3 0.083
#define W4 0.333

/* Image variables */
char Name1[50];
char Name2[50];
IM_TYPE *Image1;
IM_TYPE *Image2;
int PixType, Xdim, Ydim, Zdim, DimCnt;

/*---------------------------------------------------------------------------*/
/* Purpose:  Calculate gradient magnitude for a scalar image.                */
/*---------------------------------------------------------------------------*/
void GradScalar(int Method)
{
   FLOAT_TYPE **Data1;
   FLOAT_TYPE **Data2;
   int x, y;
   float Dx, Dy;

   /* Read input image */
   Data1 = (FLOAT_TYPE **) im_alloc2D(Image1, FLOAT);
   im_read(Image1, FLOAT, (char *) &(Data1[0][0]));

   /* Create output image */
   Image2 = im_create(Name2, FLOAT, Xdim, Ydim, 1);
   Data2 = (FLOAT_TYPE **) im_alloc2D(Image2, FLOAT);

   /* Calculate fast image gradient */
   if (Method == DEFAULT)
      for (y = 1; y < Ydim; y++)
         for (x = 1; x < Xdim; x++)
         {
            Dx = Data1[y][x] - Data1[y][x - 1];
            Dy = Data1[y][x] - Data1[y - 1][x];
            Data2[y][x] = (FLOAT_TYPE) sqrt((double) (Dx * Dx + Dy * Dy));
         }

   /* Calculate Robert's gradient operator */
   else if (Method == ROBERTS)
      for (y = 1; y < Ydim; y++)
         for (x = 1; x < Xdim; x++)
         {
            Dx = Data1[y][x] - Data1[y - 1][x - 1];
            Dy = Data1[y - 1][x] - Data1[y][x - 1];
            Data2[y][x] = (FLOAT_TYPE) sqrt((double) (Dx * Dx + Dy * Dy));
         }

   /* Calculate Sobel's gradient operator */
   else if (Method == SOBEL)
      for (y = 1; y < (Ydim - 1); y++)
         for (x = 1; x < (Xdim - 1); x++)
         {
            Dx = (Data1[y + 1][x + 1] + 2 * Data1[y][x + 1]
                  + Data1[y - 1][x + 1] - Data1[y + 1][x - 1]
                  - 2 * Data1[y][x - 1] - Data1[y - 1][x - 1]) / 8;
            Dy = (Data1[y + 1][x + 1] + 2 * Data1[y + 1][x]
                  + Data1[y + 1][x - 1] - Data1[y - 1][x + 1]
                  - 2 * Data1[y - 1][x] - Data1[y - 1][x - 1]) / 8;
            Data2[y][x] = (FLOAT_TYPE) sqrt((double) (Dx * Dx + Dy * Dy));
         }

   /* Calculate cubic spline operator */
   else if (Method == CUBIC)
      for (y = 1; y < (Ydim - 1); y++)
         for (x = 1; x < (Xdim - 1); x++)
         {
            Dx = (Data1[y + 1][x + 1] + 4 * Data1[y][x + 1]
                  + Data1[y - 1][x + 1] - Data1[y + 1][x - 1]
                  - 4 * Data1[y][x - 1] - Data1[y - 1][x - 1]) / 12;
            Dy = (Data1[y + 1][x + 1] + 4 * Data1[y + 1][x]
                  + Data1[y + 1][x - 1] - Data1[y - 1][x + 1]
                  - 4 * Data1[y - 1][x] - Data1[y - 1][x - 1]) / 12;
            Data2[y][x] = (FLOAT_TYPE) sqrt((double) (Dx * Dx + Dy * Dy));
         }

   /* Handle boundary rows and columns */
   for (x = 0; x < Xdim; x++)
   {
      Data2[0][x] = Data2[1][x];
      Data2[Ydim - 1][x] = Data2[Ydim - 2][x];
   }
   for (y = 0; y < Ydim; y++)
   {
      Data2[y][0] = Data2[y][1];
      Data2[y][Xdim - 1] = Data2[y][Xdim - 2];
   }

   /* Write information to output image */
   im_write(Image2, FLOAT, (char *) &(Data2[0][0]));
   im_free2D((char **) Data1);
   im_free2D((char **) Data2);
}

/*---------------------------------------------------------------------------*/
/* Purpose:  Calculate gradient magnitude for a vector image.                */
/*---------------------------------------------------------------------------*/
void GradVector(int Method)
{
   FLOAT_TYPE ***Data1;
   FLOAT_TYPE **Data2;
   int x, y, z;
   float Dx[3], Dy[3];

   /* Read input image */
   Data1 = (FLOAT_TYPE ***) im_alloc3D(Image1, FLOAT);
   im_read(Image1, FLOAT, (char *) &(Data1[0][0][0]));

   /* Create output image */
   Image2 = im_create(Name2, FLOAT, Xdim, Ydim, 1);
   Data2 = (FLOAT_TYPE **) im_alloc2D(Image2, FLOAT);

   /* Calculate fast image gradient */
   if (Method == DEFAULT)

      for (y = 1; y < Ydim; y++)
         for (x = 1; x < Xdim; x++)
         {
            for (z = 0; z < 3; z++)
            {
               Dx[z] = Data1[z][y][x] - Data1[z][y][x - 1];
               Dy[z] = Data1[z][y][x] - Data1[z][y - 1][x];
            }
            Data2[y][x] = (float) sqrt((double)
                            (Dx[0] * Dx[0] + Dx[1] * Dx[1] + Dx[2] * Dx[2] +
                             Dy[0] * Dy[0] + Dy[1] * Dy[1] + Dy[2] * Dy[2]));
         }

   /* Calculate Robert's gradient operator */
   else if (Method == ROBERTS)
      for (y = 1; y < Ydim; y++)
         for (x = 1; x < Xdim; x++)
         {
            for (z = 0; z < 3; z++)
            {
               Dx[z] = Data1[z][y][x] - Data1[z][y - 1][x - 1];
               Dy[z] = Data1[z][y - 1][x] - Data1[z][y][x - 1];
            }
            Data2[y][x] = (float) sqrt((double)
                            (Dx[0] * Dx[0] + Dx[1] * Dx[1] + Dx[2] * Dx[2] +
                             Dy[0] * Dy[0] + Dy[1] * Dy[1] + Dy[2] * Dy[2]));
         }

   /* Calculate Sobel's gradient operator */
   else if (Method == SOBEL)
      for (y = 1; y < (Ydim - 1); y++)
         for (x = 1; x < (Xdim - 1); x++)
         {
            for (z = 0; z < 3; z++)
            {
               Dx[z] = (Data1[z][y + 1][x + 1] + 2 * Data1[z][y][x + 1]
                        + Data1[z][y - 1][x + 1] - Data1[z][y + 1][x - 1]
                     - 2 * Data1[z][y][x - 1] - Data1[z][y - 1][x - 1]) / 8;
               Dy[z] = (Data1[z][y + 1][x + 1] + 2 * Data1[z][y + 1][x]
                        + Data1[z][y + 1][x - 1] - Data1[z][y - 1][x + 1]
                     - 2 * Data1[z][y - 1][x] - Data1[z][y - 1][x - 1]) / 8;
            }
            Data2[y][x] = (float) sqrt((double)
                            (Dx[0] * Dx[0] + Dx[1] * Dx[1] + Dx[2] * Dx[2] +
                             Dy[0] * Dy[0] + Dy[1] * Dy[1] + Dy[2] * Dy[2]));
         }

   /* Calculate cubic spline operator */
   else if (Method == CUBIC)
      for (y = 1; y < (Ydim - 1); y++)
         for (x = 1; x < (Xdim - 1); x++)
         {
            for (z = 0; z < 3; z++)
            {
               Dx[z] = (Data1[z][y + 1][x + 1] + 4 * Data1[z][y][x + 1]
                        + Data1[z][y - 1][x + 1] - Data1[z][y + 1][x - 1]
                    - 4 * Data1[z][y][x - 1] - Data1[z][y - 1][x - 1]) / 12;
               Dy[z] = (Data1[z][y + 1][x + 1] + 4 * Data1[z][y + 1][x]
                        + Data1[z][y + 1][x - 1] - Data1[z][y - 1][x + 1]
                    - 4 * Data1[z][y - 1][x] - Data1[z][y - 1][x - 1]) / 12;
            }
            Data2[y][x] = (float) sqrt((double)
                            (Dx[0] * Dx[0] + Dx[1] * Dx[1] + Dx[2] * Dx[2] +
                             Dy[0] * Dy[0] + Dy[1] * Dy[1] + Dy[2] * Dy[2]));
         }

   /* Handle boundary rows and columns */
   for (x = 0; x < Xdim; x++)
   {
      Data2[0][x] = Data2[1][x];
      Data2[Ydim - 1][x] = Data2[Ydim - 2][x];
   }
   for (y = 0; y < Ydim; y++)
   {
      Data2[y][0] = Data2[y][1];
      Data2[y][Xdim - 1] = Data2[y][Xdim - 2];
   }

   /* Write information to output image */
   im_write(Image2, FLOAT, (char *) &(Data2[0][0]));
   im_free3D((char ***) Data1);
   im_free2D((char **) Data2);
}

/*---------------------------------------------------------------------------*/
/* Purpose:  Calculate gradient magnitude for a color image.                 */
/*---------------------------------------------------------------------------*/
void GradColor(int Method)
{
   COLOR_TYPE **Data1;
   FLOAT_TYPE **Data2;
   int x, y;
   float Rx, Gx, Bx;
   float Ry, Gy, By;

   /* Read input image */
   Data1 = (COLOR_TYPE **) im_alloc2D(Image1, COLOR);
   im_read(Image1, COLOR, (char *) &(Data1[0][0]));

   /* Create output image */
   Image2 = im_create(Name2, FLOAT, Xdim, Ydim, 1);
   Data2 = (FLOAT_TYPE **) im_alloc2D(Image2, FLOAT);

   /* Calculate fast image gradient */
   if (Method == DEFAULT)
      for (y = 1; y < Ydim; y++)
         for (x = 1; x < Xdim; x++)
         {
            Rx = (float) Data1[y][x].r - (float) Data1[y][x - 1].r;
            Gx = (float) Data1[y][x].g - (float) Data1[y][x - 1].g;
            Bx = (float) Data1[y][x].b - (float) Data1[y][x - 1].b;
            Ry = (float) Data1[y][x].r - (float) Data1[y - 1][x].r;
            Gy = (float) Data1[y][x].g - (float) Data1[y - 1][x].g;
            By = (float) Data1[y][x].b - (float) Data1[y - 1][x].b;

            Data2[y][x] = (float) sqrt((double)
               (Rx * Rx + Gx * Gx + Bx * Bx + Ry * Ry + Gy * Gy + By * By));
         }

   /* Calculate Robert's gradient operator */
   else if (Method == ROBERTS)
      for (y = 1; y < Ydim; y++)
         for (x = 1; x < Xdim; x++)
         {
            Rx = (float) Data1[y][x].r - (float) Data1[y - 1][x - 1].r;
            Gx = (float) Data1[y][x].g - (float) Data1[y - 1][x - 1].g;
            Bx = (float) Data1[y][x].b - (float) Data1[y - 1][x - 1].b;
            Ry = (float) Data1[y - 1][x].r - (float) Data1[y][x - 1].r;
            Gy = (float) Data1[y - 1][x].g - (float) Data1[y][x - 1].g;
            By = (float) Data1[y - 1][x].b - (float) Data1[y][x - 1].b;

            Data2[y][x] = (float) sqrt((double)
               (Rx * Rx + Gx * Gx + Bx * Bx + Ry * Ry + Gy * Gy + By * By));
         }

   /* Calculate Sobel's gradient operator */
   else if (Method == SOBEL)
      for (y = 1; y < (Ydim - 1); y++)
         for (x = 1; x < (Xdim - 1); x++)
         {
            Rx = W1 * Data1[y + 1][x + 1].r + W2 * Data1[y][x + 1].r
               + W1 * Data1[y - 1][x + 1].r - W1 * Data1[y + 1][x - 1].r
               - W2 * Data1[y][x - 1].r - W1 * Data1[y - 1][x - 1].r;

            Gx = W1 * Data1[y + 1][x + 1].g + W2 * Data1[y][x + 1].g
               + W1 * Data1[y - 1][x + 1].g - W1 * Data1[y + 1][x - 1].g
               - W2 * Data1[y][x - 1].g - W1 * Data1[y - 1][x - 1].g;

            Bx = W1 * Data1[y + 1][x + 1].b + W2 * Data1[y][x + 1].b
               + W1 * Data1[y - 1][x + 1].b - W1 * Data1[y + 1][x - 1].b
               - W2 * Data1[y][x - 1].b - W1 * Data1[y - 1][x - 1].b;

            Ry = W1 * Data1[y + 1][x + 1].r + W2 * Data1[y + 1][x].r
               + W1 * Data1[y + 1][x - 1].r - W1 * Data1[y - 1][x + 1].r
               - W2 * Data1[y - 1][x].r - W1 * Data1[y - 1][x - 1].r;

            Gy = W1 * Data1[y + 1][x + 1].g + W2 * Data1[y + 1][x].g
               + W1 * Data1[y + 1][x - 1].g - W1 * Data1[y - 1][x + 1].g
               - W2 * Data1[y - 1][x].g - W1 * Data1[y - 1][x - 1].g;

            By = W1 * Data1[y + 1][x + 1].b + W2 * Data1[y + 1][x].b
               + W1 * Data1[y + 1][x - 1].b - W1 * Data1[y - 1][x + 1].b
               - W2 * Data1[y - 1][x].b - W1 * Data1[y - 1][x - 1].b;

            Data2[y][x] = (float) sqrt((double)
               (Rx * Rx + Gx * Gx + Bx * Bx + Ry * Ry + Gy * Gy + By * By));
         }

   /* Calculate cubic spline operator */
   else if (Method == CUBIC)
      for (y = 1; y < (Ydim - 1); y++)
         for (x = 1; x < (Xdim - 1); x++)
         {
            Rx = W3 * Data1[y + 1][x + 1].r + W4 * Data1[y][x + 1].r
               + W3 * Data1[y - 1][x + 1].r - W3 * Data1[y + 1][x - 1].r
               - W4 * Data1[y][x - 1].r - W3 * Data1[y - 1][x - 1].r;

            Gx = W3 * Data1[y + 1][x + 1].g + W4 * Data1[y][x + 1].g
               + W3 * Data1[y - 1][x + 1].g - W3 * Data1[y + 1][x - 1].g
               - W4 * Data1[y][x - 1].g - W3 * Data1[y - 1][x - 1].g;

            Bx = W3 * Data1[y + 1][x + 1].b + W4 * Data1[y][x + 1].b
               + W3 * Data1[y - 1][x + 1].b - W3 * Data1[y + 1][x - 1].b
               - W4 * Data1[y][x - 1].b - W3 * Data1[y - 1][x - 1].b;

            Ry = W3 * Data1[y + 1][x + 1].r + W4 * Data1[y + 1][x].r
               + W3 * Data1[y + 1][x - 1].r - W3 * Data1[y - 1][x + 1].r
               - W4 * Data1[y - 1][x].r - W3 * Data1[y - 1][x - 1].r;

            Gy = W3 * Data1[y + 1][x + 1].g + W4 * Data1[y + 1][x].g
               + W3 * Data1[y + 1][x - 1].g - W3 * Data1[y - 1][x + 1].g
               - W4 * Data1[y - 1][x].g - W3 * Data1[y - 1][x - 1].g;

            By = W3 * Data1[y + 1][x + 1].b + W4 * Data1[y + 1][x].b
               + W3 * Data1[y + 1][x - 1].b - W3 * Data1[y - 1][x + 1].b
               - W4 * Data1[y - 1][x].b - W3 * Data1[y - 1][x - 1].b;

            Data2[y][x] = (float) sqrt((double)
               (Rx * Rx + Gx * Gx + Bx * Bx + Ry * Ry + Gy * Gy + By * By));
         }

   /* Handle boundary rows and columns */
   for (x = 0; x < Xdim; x++)
   {
      Data2[0][x] = Data2[1][x];
      Data2[Ydim - 1][x] = Data2[Ydim - 2][x];
   }
   for (y = 0; y < Ydim; y++)
   {
      Data2[y][0] = Data2[y][1];
      Data2[y][Xdim - 1] = Data2[y][Xdim - 2];
   }

   /* Write information to output image */
   im_write(Image2, FLOAT, (char *) &(Data2[0][0]));
   im_free2D((char **) Data1);
   im_free2D((char **) Data2);
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This is the main program.                                       */
/*---------------------------------------------------------------------------*/
int main(int argc, char *argv[])
{
   /* Program variables */
   int i = 0;
   int Method = DEFAULT;

   /* Interpret program options */
   printf("Gradient Magnitude Program - KUIM Version 3.1\n\n");
   while ((++i < argc) && (argv[i][0] == '-'))
      switch (argv[i][1])
      {
      case 'd':
         Method = DEFAULT;
         break;
      case 'r':
         Method = ROBERTS;
         break;
      case 's':
         Method = SOBEL;
         break;
      case 'c':
         Method = CUBIC;
         break;
      default:
         Error("Invalid option encountered");
         break;
      }

   /* Check number of file names */
   if (argc - i != 2)
   {
      fprintf(stderr, "Usage: grad [options] infile outfile\n");
      fprintf(stderr, "       [-d]  Use finite differences (default)\n");
      fprintf(stderr, "       [-r]  Use Robert's operator\n");
      fprintf(stderr, "       [-s]  Use Sobel's operator\n");
      fprintf(stderr, "       [-c]  Use cubic spline operator\n");
      exit(1);
   }

   /* Get image file names from argument list */
   if (sscanf(argv[i++], "%s", Name1) == 0)
      Error("Could not get input file name");
   if (sscanf(argv[i++], "%s", Name2) == 0)
      Error("Could not get output file name");

   /* Open input image */
   Image1 = im_open(Name1, &PixType, &Xdim, &Ydim, &Zdim, &DimCnt);

   /* Handle color images */
   if (PixType == COLOR || PixType == PSEUDO || PixType == JPEG_RGB)
      GradColor(Method);

   /* Handle scalar images */
   else if (DimCnt == 2)
      GradScalar(Method);

   /* Handle vector images */
   else if ((DimCnt == 3) && (Zdim == 3))
      GradVector(Method);

   /* Unsupported image type */
   else
      Error("Can not process image");
   return (0);
}
