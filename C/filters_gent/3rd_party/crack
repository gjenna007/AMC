/*---------------------------------------------------------------------------*/
/* Program:  crack.c                                                         */
/*                                                                           */
/* Purpose:  This program searches images at 0,45,90,135 degrees to find     */
/*           intensity profiles which correspond to cracks in cement.        */
/*                                                                           */
/* Author:   John Gauch                                                      */
/*                                                                           */
/* Date:     December 22, 1994                                               */
/*                                                                           */
/* Note:     Copyright (C) The University of Kansas, 1994                    */
/*---------------------------------------------------------------------------*/
#include <IM.h>

int Xdim, Ydim, Zdim;
SHORT_TYPE **Data1;
SHORT_TYPE **Data2;
int BlobSize;
int BlobValue;
int BlobCnt;

/* Function prototypes */
void BlobStats(int x, int y);
void BlobColor(int x, int y, int color);

/*---------------------------------------------------------------------------*/
/* Purpose:  This is the main program.                                       */
/*---------------------------------------------------------------------------*/
int main(int argc, char *argv[])
{
   /* Image variables */
   char Name1[50];
   char Name2[50];
   IM_TYPE *Image1;
   IM_TYPE *Image2;
   int PixType, DimCnt;

   /* Program variables */
   int Debug = FALSE;
   int Number = 15;
   int Number2;
   int Threshold = 60;
   int i = 0, x, y, cx, cy;
   short int Flag;

   /* Interpret program options */
   printf("CRACK Program - KUIM Version 2.0\n\n");
   while ((++i < argc) && (argv[i][0] == '-'))
      switch (argv[i][1])
      {
      case 't':
         if (sscanf(argv[++i], "%d", &Threshold) == 0)
            Error("Could not get integer argument");
         break;
      case 'n':
         if (sscanf(argv[++i], "%d", &Number) == 0)
            Error("Could not get integer argument");
         break;
      case 'd':
         Debug = TRUE;
         break;
      default:
         Error("Invalid option encountered");
         break;
      }

   /* Check number of file names */
   if (argc - i != 2)
   {
      fprintf(stderr, "Usage: crack [options] infile outfile\n");
      fprintf(stderr, "\t[-d]    Print debugging information\n");
      fprintf(stderr, "\t[-n #]  Number of pixels to search (%d)\n", Number);
      fprintf(stderr, "\t[-t #]  Intensity change threshold (%d)\n", Threshold);
      exit(1);
   }

   /* Get image file names from argument list */
   if (sscanf(argv[i++], "%s", Name1) == 0)
      Error("Could not get input file name");
   if (sscanf(argv[i++], "%s", Name2) == 0)
      Error("Could not get output file name");

   /* Read input image */
   Image1 = im_open(Name1, &PixType, &Xdim, &Ydim, &Zdim, &DimCnt);
   if (DimCnt != 2)
      Error("Can not process 1D or 3D images");
   Data1 = (SHORT_TYPE **) im_alloc2D(Image1, SHORT);
   im_read(Image1, SHORT, (char *) &(Data1[0][0]));

   /* Create output image */
   Image2 = im_create(Name2, SHORT, Xdim, Ydim, Zdim);
   Data2 = (SHORT_TYPE **) im_alloc2D(Image2, SHORT);

   /* Copy input image */
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         Data2[y][x] = Data1[y][x];

   /* Smooth input image */
   for (y = 1; y < (Ydim - 1); y++)
      for (x = 1; x < (Xdim - 1); x++)
         Data1[y][x] = (Data2[y - 1][x - 1] + 2 * Data2[y - 1][x] + Data2[y - 1][x + 1]
               + 2 * Data2[y][x - 1] + 4 * Data2[y][x] + 2 * Data2[y][x + 1]
                        + Data2[y + 1][x - 1] + 2 * Data2[y + 1][x] + Data2[y + 1][x + 1]) / 16;

   /* Initialize output image */
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         Data2[y][x] = 0;

   /* Find cracks in image */
   Number2 = (int) (0.5 + Number / 1.414);
   for (y = Number; y + Number < Ydim - 1; y++)
      for (x = Number; x + Number < Xdim - 1; x++)
         if (Data1[y][x] < 100)
         {
            /* Search for 0 degree cracks */
            Flag = 0;
            for (cx = x - Number; cx < x; cx++)
               if (Data1[y][cx] - Data1[y][x] > Threshold)
                  Flag = 1;
            if (Flag == 1)
               for (cx = x + Number; cx > x; cx--)
                  if (Data1[y][cx] - Data1[y][x] > Threshold)
                     Flag = 2;
            if (Flag == 2)
            {
               for (cx = x - Number; cx < x; cx++)
                  if (Data1[y][cx] - Data1[y][cx + 1] > Threshold / 3)
                     Flag = 3;
               for (cx = x + Number; cx > x; cx--)
                  if (Data1[y][cx] - Data1[y][cx - 1] > Threshold / 3)
                     Flag = 3;
            }

            /* Search for 90 degree cracks */
            if (Flag != 3)
            {
               Flag = 0;
               for (cy = y - Number; cy < y; cy++)
                  if (Data1[cy][x] - Data1[y][x] > Threshold)
                     Flag = 1;
               if (Flag == 1)
                  for (cy = y + Number; cy > y; cy--)
                     if (Data1[cy][x] - Data1[y][x] > Threshold)
                        Data2[y][x] = 2;
               if (Flag == 2)
               {
                  for (cy = y - Number; cy < y; cy++)
                     if (Data1[cy][x] - Data1[cy + 1][x] > Threshold / 3)
                        Flag = 3;
                  for (cy = y + Number; cy > y; cy--)
                     if (Data1[cy][x] - Data1[cy - 1][x] > Threshold / 3)
                        Flag = 3;
               }
            }

            /* Search for 45 degree cracks */
            if (Flag != 3)
            {
               Flag = 0;
               for (cy = y - Number2, cx = x - Number2; cy < y; cy++, cx++)
                  if (Data1[cy][cx] - Data1[y][x] > Threshold)
                     Flag = 1;
               if (Flag == 1)
                  for (cy = y + Number2, cx = x + Number2; cy > y; cy--, cx--)
                     if (Data1[cy][cx] - Data1[y][x] > Threshold)
                        Flag = 2;
               if (Flag == 2)
               {
                  for (cy = y - Number2, cx = x - Number2; cy < y; cy++, cx++)
                     if (Data1[cy][cx] - Data1[cy + 1][cx + 1] > Threshold / 3)
                        Flag = 3;
                  for (cy = y + Number2, cx = x + Number2; cy > y; cy--, cx--)
                     if (Data1[cy][cx] - Data1[cy - 1][cx - 1] > Threshold / 3)
                        Flag = 3;
               }
            }

            /* Search for 135 degree cracks */
            if (Flag != 3)
            {
               Flag = 0;
               for (cy = y - Number2, cx = x + Number2; cy < y; cy++, cx--)
                  if (Data1[cy][cx] - Data1[y][x] > Threshold)
                     Flag = 1;
               if (Flag == 1)
                  for (cy = y + Number2, cx = x - Number2; cy > y; cy--, cx++)
                     if (Data1[cy][cx] - Data1[y][x] > Threshold)
                        Flag = 2;
               if (Flag == 2)
               {
                  for (cy = y - Number2, cx = x + Number2; cy < y; cy++, cx--)
                     if (Data1[cy][cx] - Data1[cy + 1][cx - 1] > Threshold / 3)
                        Flag = 3;
                  for (cy = y + Number2, cx = x - Number2; cy > y; cy--, cx++)
                     if (Data1[cy][cx] - Data1[cy - 1][cx + 1] > Threshold / 3)
                        Flag = 3;
               }
            }

            /* Mark crack pixels */
            if (Flag == 3)
               Data2[y][x] = 1;
            else
               Data2[y][x] = 0;
         }

   /* Calculate statistics of crack regions */
   BlobCnt = 0;
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         if (Data2[y][x] == 1)
         {
            BlobCnt++;
            BlobSize = 0;
            BlobValue = 0;
            BlobStats(x, y);
            if (BlobSize <= 10)
               BlobColor(x, y, 0);
            else if (Debug == TRUE)
               printf("crack %d size %d level %d\n",
                      BlobCnt + 1, BlobSize, BlobValue / BlobSize);
         }

   /* Write information to output image */
   im_write(Image2, SHORT, (char *) &(Data2[0][0]));
   im_free2D((char **) Data1);
   im_free2D((char **) Data2);
   return (0);
}

/* Calculate statistics in 8 connected blob */
void BlobStats(int x, int y)
{
   if (Data2[y][x] == 1)
   {
      Data2[y][x] = -1;
      BlobSize++;
      BlobValue += Data1[y][x];
      BlobStats(x + 1, y);
      BlobStats(x - 1, y);
      BlobStats(x, y + 1);
      BlobStats(x, y - 1);
      BlobStats(x + 1, y + 1);
      BlobStats(x + 1, y - 1);
      BlobStats(x - 1, y + 1);
      BlobStats(x - 1, y - 1);
   }
}

/* Color pixels in 8 connected blob */
void BlobColor(int x, int y, int color)
{
   if (Data2[y][x] == -1)
   {
      Data2[y][x] = color;
      BlobColor(x + 1, y, color);
      BlobColor(x - 1, y, color);
      BlobColor(x, y + 1, color);
      BlobColor(x, y - 1, color);
      BlobColor(x + 1, y + 1, color);
      BlobColor(x + 1, y - 1, color);
      BlobColor(x - 1, y + 1, color);
      BlobColor(x - 1, y - 1, color);
   }
}
