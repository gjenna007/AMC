/*---------------------------------------------------------------------------*/
/* Program:  zeros.c                                                         */
/*                                                                           */
/* Purpose:  This program finds zero crossings in KUIM format images.        */
/*           This is often used in conjunction with CANNY or LAPLACIAN.      */
/*                                                                           */
/* Author:   John Gauch                                                      */
/*                                                                           */
/* Date:     April 1, 1994      - Original program.                          */
/*           September 22, 1994 - Extended to 3d images.                     */
/*                                                                           */
/* Note:     Copyright (C) The University of Kansas, 1994                    */
/*---------------------------------------------------------------------------*/
#include <IM.h>

/* Global variables */
FLOAT_TYPE **data1;
SHORT_TYPE **data2;
FLOAT_TYPE ***Data1;
SHORT_TYPE ***Data2;
int Xdim, Ydim, Zdim, DimCnt;

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine finds zero crossings.                              */
/*---------------------------------------------------------------------------*/
void Zeros3D()
{
   int x, y, z;

   /* Initialize output image */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
         for (x = 0; x < Xdim; x++)
            Data2[z][y][x] = 0;

   /* Loop through rows looking for zero crossings */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
         for (x = 1; x < Xdim; x++)
         {
            /* Mark pixel location closest to zero */
            if ((Data1[z][y][x - 1] < 0.0) && (Data1[z][y][x] >= 0.0))
               if (-Data1[z][y][x - 1] < Data1[z][y][x])
                  Data2[z][y][x - 1] = 1;
               else
                  Data2[z][y][x] = 1;

            /* Mark pixel location closest to zero */
            if ((Data1[z][y][x] < 0.0) && (Data1[z][y][x - 1] >= 0.0))
               if (-Data1[z][y][x] < Data1[z][y][x - 1])
                  Data2[z][y][x] = 1;
               else
                  Data2[z][y][x - 1] = 1;
         }

   /* Loop through columns looking for zero crossings */
   for (z = 0; z < Zdim; z++)
      for (y = 1; y < Ydim; y++)
         for (x = 0; x < Xdim; x++)
         {
            /* Mark pixel location closest to zero */
            if ((Data1[z][y - 1][x] < 0.0) && (Data1[z][y][x] >= 0.0))
               if (-Data1[z][y - 1][x] < Data1[z][y][x])
                  Data2[z][y - 1][x] = 1;
               else
                  Data2[z][y][x] = 1;

            /* Mark pixel location closest to zero */
            if ((Data1[z][y][x] < 0.0) && (Data1[z][y - 1][x] >= 0.0))
               if (-Data1[z][y][x] < Data1[z][y - 1][x])
                  Data2[z][y][x] = 1;
               else
                  Data2[z][y - 1][x] = 1;
         }

   /* Process first and last row */
   for (z = 0; z < Zdim; z++)
      for (x = 0; x < Xdim; x++)
      {
         if (Data1[z][0][x] < 0.0)
            Data2[z][0][x] = 1;
         if (Data1[z][Ydim - 1][x] < 0.0)
            Data2[z][Ydim - 1][x] = 1;
      }

   /* Process first and last column */
   for (z = 0; z < Zdim; z++)
      for (y = 0; y < Ydim; y++)
      {
         if (Data1[z][y][0] < 0.0)
            Data2[z][y][0] = 1;
         if (Data1[z][y][Xdim - 1] < 0.0)
            Data2[z][y][Xdim - 1] = 1;
      }
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This routine finds zero crossings.                              */
/*---------------------------------------------------------------------------*/
void Zeros2D()
{
   int x, y;

   /* Initialize output image */
   for (y = 0; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
         data2[y][x] = 0;

   /* Loop through rows looking for zero crossings */
   for (y = 0; y < Ydim; y++)
      for (x = 1; x < Xdim; x++)
      {
         /* Mark pixel location closest to zero */
         if ((data1[y][x - 1] < 0.0) && (data1[y][x] >= 0.0))
            if (-data1[y][x - 1] < data1[y][x])
               data2[y][x - 1] = 1;
            else
               data2[y][x] = 1;

         /* Mark pixel location closest to zero */
         if ((data1[y][x] < 0.0) && (data1[y][x - 1] >= 0.0))
            if (-data1[y][x] < data1[y][x - 1])
               data2[y][x] = 1;
            else
               data2[y][x - 1] = 1;
      }

   /* Loop through columns looking for zero crossings */
   for (y = 1; y < Ydim; y++)
      for (x = 0; x < Xdim; x++)
      {
         /* Mark pixel location closest to zero */
         if ((data1[y - 1][x] < 0.0) && (data1[y][x] >= 0.0))
            if (-data1[y - 1][x] < data1[y][x])
               data2[y - 1][x] = 1;
            else
               data2[y][x] = 1;

         /* Mark pixel location closest to zero */
         if ((data1[y][x] < 0.0) && (data1[y - 1][x] >= 0.0))
            if (-data1[y][x] < data1[y - 1][x])
               data2[y][x] = 1;
            else
               data2[y - 1][x] = 1;
      }

   /* Process first and last row */
   for (x = 0; x < Xdim; x++)
   {
      if (data1[0][x] < 0.0)
         data2[0][x] = 1;
      if (data1[Ydim - 1][x] < 0.0)
         data2[Ydim - 1][x] = 1;
   }

   /* Process first and last column */
   for (y = 0; y < Ydim; y++)
   {
      if (data1[y][0] < 0.0)
         data2[y][0] = 1;
      if (data1[y][Xdim - 1] < 0.0)
         data2[y][Xdim - 1] = 1;
   }
}

/*---------------------------------------------------------------------------*/
/* Purpose:  This is the main program.                                       */
/*---------------------------------------------------------------------------*/
int main(int argc, char *argv[])
{
   /* Image variables */
   char Name1[50];
   char Name2[50];
   IM_TYPE *Image1;
   IM_TYPE *Image2;
   int PixType, DimCnt;

   /* Program variables */
   int Debug = FALSE;
   int i = 0;

   /* Interpret program options */
   printf("ZEROS Program - KUIM Version 1.0\n\n");
   while ((++i < argc) && (argv[i][0] == '-'))
      switch (argv[i][1])
      {
      case 'd':
         Debug = TRUE;
         break;
      default:
         Error("Invalid option encountered");
         break;
      }

   /* Check number of file names */
   if (argc - i != 2)
   {
      fprintf(stderr, "Usage: zeros [options] infile outfile\n");
      fprintf(stderr, "       [-d]    Print debugging information\n");
      exit(1);
   }

   /* Get image file names from argument list */
   if (sscanf(argv[i++], "%s", Name1) == 0)
      Error("Could not get input file name");
   if (sscanf(argv[i++], "%s", Name2) == 0)
      Error("Could not get output file name");

   /* Open input image */
   Image1 = im_open(Name1, &PixType, &Xdim, &Ydim, &Zdim, &DimCnt);
   if (DimCnt == 2)
   {
      /* Read input image */
      data1 = (FLOAT_TYPE **) im_alloc2D(Image1, FLOAT);
      im_read(Image1, FLOAT, (char *) &(data1[0][0]));

      /* Create output image */
      Image2 = im_create(Name2, SHORT, Xdim, Ydim, Zdim);
      data2 = (SHORT_TYPE **) im_alloc2D(Image2, SHORT);

      /* Calculate output image */
      Zeros2D();

      /* Write information to output image */
      im_write(Image2, SHORT, (char *) &(data2[0][0]));
      im_free2D((char **) data1);
      im_free2D((char **) data2);
   }

   else if (DimCnt == 3)
   {
      /* Read input image */
      Data1 = (FLOAT_TYPE ***) im_alloc3D(Image1, FLOAT);
      im_read(Image1, FLOAT, (char *) &(Data1[0][0][0]));

      /* Create output image */
      Image2 = im_create(Name2, SHORT, Xdim, Ydim, Zdim);
      Data2 = (SHORT_TYPE ***) im_alloc3D(Image2, SHORT);

      /* Calculate output image */
      Zeros3D();

      /* Write information to output image */
      im_write(Image2, SHORT, (char *) &(Data2[0][0][0]));
      im_free3D((char ***) Data1);
      im_free3D((char ***) Data2);
   }

   return (0);
}
